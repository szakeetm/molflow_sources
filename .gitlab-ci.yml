variables:
  APP_NAME: "molflow"
  APP_NAME_CAPS: "MOLFLOW"

stages:
  - prepare
  - build
  - build-artifact
  - optional-artifact

prepare_job:
  stage: prepare                                              # This stage must run before the release stage
  rules:
    - if: $CI_COMMIT_TAG
      when: always                                             # Do not run this job when a tag is created manually
  script:
    - COMMIT_TAG=${CI_COMMIT_TAG:1} # trim v at beginning
    - echo "TAG_SUFFIX=_$COMMIT_TAG" >> variables.env             # and append to the variables.env file
  artifacts:
    reports:
      dotenv: variables.env
  tags:
    - linux

build-windows-master:
  stage: build
  before_script:
    - git submodule sync --recursive
    - git submodule update --init --recursive
  script:
    - echo "Building Windows Master"
    - Set-Variable -Name "buildpath" -Value (($pwd).path + "\build")
    - mkdir -P $buildpath
    - cd $buildpath
    - echo "Init project in:"+($pwd).path
    - C:\BuildTools\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe -DCMAKE_BUILD_TYPE=RELEASE -G Ninja $buildpath\..
    - echo "Starting build in:" + ($buildpath).path
    - C:\BuildTools\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe --build $buildpath --config Release -- -j 4
    - Set-Variable -Name "DATE" -Value (Get-Date -Format "yyyy_MM_dd")
    - Set-Variable -Name "FNAME" -Value ("\master\" + $DATE + "_" + $env:CI_COMMIT_REF_NAME + "_" + $env:CI_PIPELINE_ID)
    - Set-Variable -Name "outputpath" -Value ($buildpath + "\bin")
    - echo $FNAME
    - New-Item -Path ("C:\" + ($APP_NAME_CAPS) + "_CI") -Name $FNAME -ItemType "directory" -Force
    - Copy-Item (($outputpath) + "\*") -Destination ("C:\" + ($APP_NAME_CAPS) + "_CI\" + ($FNAME) + "\") -Recurse -Force
  after_script:
    - echo "Finished"
  tags:
    - windows

.build-unix:
  stage: build
  before_script:
    - whoami
    - git submodule sync --recursive
    - git submodule update --init --recursive
  script:
    - echo "Building $OS_NAME Master"
    - buildpath=$(pwd)"/build"
    - mkdir -p $buildpath
    - cd $buildpath
    - echo "Init project in:" $(pwd)
    - cmake -DCMAKE_BUILD_TYPE=RELEASE $buildpath/..
    - echo "Starting build in:" $buildpath
    - cmake --build $buildpath --config Release -- -j 4
    - export DATE=`date +%Y_%m_%d`
    - export FNAME=master'/'$DATE'_'$CI_COMMIT_REF_NAME'_'$CI_PIPELINE_ID
    - export outputpath=$buildpath'/bin/'
    - echo $FNAME
    - mkdir -p ~/$APP_NAME_CAPS'_CI/'$FNAME
    - cp -r $outputpath/* ~/$APP_NAME_CAPS'_CI/'$FNAME'/'
    - ls ~/
    - ls ~/$APP_NAME_CAPS'_CI/'
    - ls ~/$APP_NAME_CAPS'_CI/'$FNAME'/'
  after_script:
    - echo "Finished"

build-debian-master:
  extends: .build-unix
  variables:
    OS_NAME: "debian"
    OS_FULL_NAME: "linux_debian"
  tags:
    - debian

build-fedora-master:
  extends: .build-unix
  variables:
    OS_NAME: "fedora"
    OS_FULL_NAME: "linux_debian"
  tags:
    - fedora

build-macos-master:
  extends: .build-unix
  variables:
    OS_NAME: "mac"
    OS_FULL_NAME: "mac"
  needs: []
  tags:
    - macos
  rules:
    - if: '$CI_COMMIT_BRANCH'
      when: manual
      allow_failure: true
    - if: '$CI_COMMIT_TAG'
      when: manual
      allow_failure: false

.artifact-windows:
  variables:
    TAG_SUFFIX: ""
  stage: build-artifact
  before_script:
    - mkdir -P ("./" + ($APP_NAME) + "_win" + ($TAG_SUFFIX))
    - Get-ChildItem ("./" + ($APP_NAME) + "_win" + ($TAG_SUFFIX)) | Remove-Item -Recurse -Force
  script:
    - Set-Variable -Name "DATE" -Value (Get-Date -Format "yyyy_MM_dd")
    - Set-Variable -Name "FNAME" -Value ("\master\" + $DATE + "_" + $env:CI_COMMIT_REF_NAME + "_" + $env:CI_PIPELINE_ID)
    - echo $FNAME
    - echo $TAG_SUFFIX
    - echo $CI_COMMIT_TAG
    - echo $env:CI_COMMIT_TAG
    - Copy-Item ("C:/" + ($APP_NAME_CAPS) + "_CI/" + ($FNAME) + "/*") -Destination ("./" + ($APP_NAME) + "_win" + ($TAG_SUFFIX)) -Recurse -Force
  rules:
    - if: '($CI_COMMIT_TAG)'
      variables:
        TAG_SUFFIX: "_${CI_COMMIT_TAG}"
  artifacts:
    name: ${APP_NAME}_win${TAG_SUFFIX}
    paths:
      - ./${APP_NAME}_win${TAG_SUFFIX}


.artifact-unix:
  variables:
    TAG_SUFFIX: ""
  stage: build-artifact
  before_script:
    - rm -rf ./$APP_NAME'_'$OS_NAME$TAG_SUFFIX
    - mkdir -p ./$APP_NAME'_'$OS_NAME$TAG_SUFFIX
  script:
    - export DATE=`date +%Y_%m_%d`
    - export FNAME=master'/'$DATE'_'$CI_COMMIT_REF_NAME'_'$CI_PIPELINE_ID
    - echo $FNAME
    - echo ~/$APP_NAME_CAPS'_CI/'$FNAME'/'
    - ls ~/
    - ls ~/$APP_NAME_CAPS'_CI/'
    - ls ~/$APP_NAME_CAPS'_CI/'$FNAME'/'
    - cp -r ~/$APP_NAME_CAPS'_CI/'$FNAME'/'* ./$APP_NAME'_'$OS_NAME$TAG_SUFFIX
  rules:
    - if: '($CI_COMMIT_TAG)'
      variables:
        TAG_SUFFIX: "_${CI_COMMIT_TAG}"
  artifacts:
    name: ${APP_NAME}_${OS_NAME}${TAG_SUFFIX}
    paths:
      - ./${APP_NAME}_${OS_NAME}${TAG_SUFFIX}

.artifact-prop-master:
  artifacts:
    expire_in: 8 weeks
  rules:
    - if: '($CI_COMMIT_BRANCH == "master" && $OS_NAME != "mac")'
      when: always
    - if: '($CI_COMMIT_BRANCH == "master" && $OS_NAME == "mac")'
      when: manual
      allow_failure: true

.artifact-prop-branch:
  artifacts:
    expire_in: 2 weeks
  rules:
    - if: '($CI_COMMIT_BRANCH != "master" && $CI_COMMIT_TAG == null && $OS_NAME != "mac")'
      when: always
    - if: '($CI_COMMIT_BRANCH != "master" && $CI_COMMIT_TAG == null && $OS_NAME == "mac")'
      when: manual
      allow_failure: true

.artifact-prop-tags:
  artifacts:
    expire_in: 5 yrs
  rules:
    - if: '($CI_COMMIT_TAG)'
      when: always

build-artifact-windows-master:
  extends:
    - .artifact-windows
    - .artifact-prop-master
  needs:
    - job: build-windows-master
  tags:
    - windows

build-artifact-debian-master:
  extends:
    - .artifact-unix
    - .artifact-prop-master
  variables:
    OS_NAME: "debian"
  needs:
    - job: build-debian-master
  tags:
    - debian

build-artifact-fedora-master:
  extends:
    - .artifact-unix
    - .artifact-prop-master
  variables:
    OS_NAME: "fedora"
  needs:
    - job: build-fedora-master
  tags:
    - fedora

build-artifact-macos-master:
  extends:
    - .artifact-unix
    - .artifact-prop-master
  stage: optional-artifact
  variables:
    OS_NAME: "mac"
  tags:
    - macos

build-artifact-windows-branch:
  extends:
    - .artifact-windows
    - .artifact-prop-branch
  needs:
    - job: build-windows-master
  tags:
    - windows

build-artifact-debian-branch:
  extends:
    - .artifact-unix
    - .artifact-prop-branch
  variables:
    OS_NAME: "debian"
  needs:
    - job: build-debian-master
  tags:
    - debian

build-artifact-fedora-branch:
  extends:
    - .artifact-unix
    - .artifact-prop-branch
  variables:
    OS_NAME: "fedora"
  needs:
    - job: build-fedora-master
  tags:
    - fedora

build-artifact-macos-branch:
  variables:
    OS_NAME: "mac"
  extends:
    - .artifact-unix
    - .artifact-prop-branch
  stage: optional-artifact
  tags:
    - macos

build-artifact-windows-tags:
  extends:
    - .artifact-windows
    - .artifact-prop-tags
  needs:
    - job: build-windows-master
    - job: prepare_job
      artifacts: true
  tags:
    - windows

build-artifact-debian-tags:
  extends:
    - .artifact-unix
    - .artifact-prop-tags
  needs:
    - job: build-debian-master
    - job: prepare_job
      artifacts: true
  variables:
    OS_NAME: "debian"
  tags:
    - debian

build-artifact-fedora-tags:
  extends:
    - .artifact-unix
    - .artifact-prop-tags
  needs:
    - job: build-fedora-master
    - job: prepare_job
      artifacts: true
  variables:
    OS_NAME: "fedora"
  tags:
    - fedora

build-artifact-macos-tags:
  variables:
    OS_NAME: "mac"
  extends:
    - .artifact-unix
    - .artifact-prop-tags
  needs:
    - job: build-macos-master
    - job: prepare_job
      artifacts: true
  tags:
    - macos