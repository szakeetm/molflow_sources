variables:
  APP_NAME: "molflow"
  APP_NAME_CAPS: "MOLFLOW"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/Molflow"
  ARTIFACTS_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/jobs/${CI_JOB_ID}/artifacts"
  RELEASES_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases"        # and append to the variables.env file
  RELEASE_LINKS_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases/${CI_COMMIT_TAG}/assets/links"        # and append to the variables.env file
  LINK_URL: "https://gitlab.cern.ch/molflow_synrad/molflow/-/jobs/artifacts/${CI_COMMIT_TAG}/download"
  # Package version can only contain numbers (0-9), and dots (.).
  # Must be in the format of X.Y.Z, i.e. should match /\A\d+\.\d+\.\d+\z/ regular expresion.
  # See https://docs.gitlab.com/ee/user/packages/generic_packages/#publish-a-package-file
  #PACKAGE_VERSION: "1.2.3"
  #DARWIN_AMD64_BINARY: "myawesomerelease-darwin-amd64-${PACKAGE_VERSION}"
  #LINUX_AMD64_BINARY: "myawesomerelease-linux-amd64-${PACKAGE_VERSION}"

stages:
  - prepare
  - build
  - build-artifact
  - build-test
  - test
  - benchmark
  - upload
  - release

prepare_job:
  stage: prepare                                              # This stage must run before the release stage
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: always
  script:
    #- add a regexp check if version is of well-posed format "vX.Y.Z"
    - COMMIT_TAG=${CI_COMMIT_TAG:1} # trim v at beginning
    - echo "TAG_VERSION_NUMBER=$COMMIT_TAG" >> variables.env      # and append to the variables.env file
    - echo "TAG_SUFFIX=_$COMMIT_TAG" >> variables.env             # and with underscore prefix
    - CHANGELOG_LINE_START=`awk '/##\ v/{print NR; exit;}' CHANGELOG.md` #CHANGELOG_LINE_START=`awk '/'$COMMIT_TAG'/{ print NR; exit}' CHANGELOG.md`
    - CHANGELOG_LINE_END=`awk '/##\ v/{ count++; if(count>1) {print NR; exit;}}' CHANGELOG.md`
    - echo "` awk 'NR > '$CHANGELOG_LINE_START' && NR < '$CHANGELOG_LINE_END'' CHANGELOG.md`" >> parsed_changelog.txt # skip first header "## tag_name" and next header found as end point
  artifacts:
    paths:
      - parsed_changelog.txt
    expire_in: 1 week
    reports:
      dotenv: variables.env

prepare_job_notag:
  stage: prepare                                              # This stage must run before the release stage
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH
      when: always
  script:
    - CHANGELOG_LINE_START=`awk '/##\ v/{print NR; exit;}' CHANGELOG.md` #CHANGELOG_LINE_START=`awk '/'$COMMIT_TAG'/{ print NR; exit}' CHANGELOG.md`
    - CHANGELOG_LINE_END=`awk '/##\ v/{ count++; if(count>1) {print NR; exit;}}' CHANGELOG.md`
    - echo "` awk 'NR > '$CHANGELOG_LINE_START' && NR < '$CHANGELOG_LINE_END'' CHANGELOG.md`" >> parsed_changelog.txt # skip first header "## tag_name" and next header found as end point
  artifacts:
    paths:
      - parsed_changelog.txt
    expire_in: 1 week

upload-job:
  stage: upload
  when: manual
  allow_failure: false
  image: registry.gitlab.com/gitlab-ci-utils/curl-jq:latest #curl + zip
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - 'for filename in ./${APP_NAME}_*; do zip -r ${filename}.zip $filename; curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ./${filename}.zip "${PACKAGE_REGISTRY_URL}/${TAG_VERSION_NUMBER}/${filename}.zip"; done'

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo 'running release_job'
    - EXTRA_DESCRIPTION=`echo "#Changelog '$CI_COMMIT_TAG'";cat parsed_changelog.txt`
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: $(echo "# Changelog '$CI_COMMIT_TAG'";cat parsed_changelog.txt) #$EXTRA_DESCRIPTION must be defined
    tag_name: '$CI_COMMIT_TAG'                                       # elsewhere in the pipeline.
    ref: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'Windows binary'
          url: '${PACKAGE_REGISTRY_URL}/${TAG_VERSION_NUMBER}/${APP_NAME}_win${TAG_SUFFIX}.zip'
        - name: 'macOS (Intel) binary' #might not exist
          url: '${PACKAGE_REGISTRY_URL}/${TAG_VERSION_NUMBER}/${APP_NAME}_mac${TAG_SUFFIX}.zip'
        - name: 'macOS (ARM) binary' #might not exist
          url: '${PACKAGE_REGISTRY_URL}/${TAG_VERSION_NUMBER}/${APP_NAME}_mac_arm${TAG_SUFFIX}.zip'
        - name: 'Ubuntu (Debian) binary'
          url: '${PACKAGE_REGISTRY_URL}/${TAG_VERSION_NUMBER}/${APP_NAME}_debian${TAG_SUFFIX}.zip'
        - name: 'CentOS (Fedora) binary'
          url: '${PACKAGE_REGISTRY_URL}/${TAG_VERSION_NUMBER}/${APP_NAME}_fedora${TAG_SUFFIX}.zip'

build-windows:
  stage: build
  before_script:
    - echo "Building Windows $CI_COMMIT_BRANCH"
    - git submodule sync --recursive
    - git submodule update --init --recursive
  script:
    - Set-Variable -Name "buildpath" -Value (($pwd).path + "\build")
    - mkdir -P $buildpath
    - cd $buildpath
    - echo "Init project in:"+($pwd).path
    - C:\BuildTools_VS2022\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe -DCMAKE_BUILD_TYPE=RELEASE -DUSE_TESTS=OFF -G Ninja $buildpath\..
    - echo "Starting build in:" + ($buildpath).path
    - C:\BuildTools_VS2022\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe --build $buildpath --config Release -- -j 4
    - Set-Variable -Name "DATE" -Value (Get-Date -Format "yyyy_MM_dd")
    - Set-Variable -Name "FNAME" -Value ("\" + $CI_COMMIT_BRANCH + "\" + $env:CI_COMMIT_REF_NAME + "_" + $env:CI_PIPELINE_ID)
    - Set-Variable -Name "outputpath" -Value ($buildpath + "\bin")
    - echo $FNAME
    - New-Item -Path ("C:\" + ($APP_NAME_CAPS) + "_CI") -Name $FNAME -ItemType "directory" -Force
    - Copy-Item (($outputpath) + "\*") -Destination ("C:\" + ($APP_NAME_CAPS) + "_CI\" + ($FNAME) + "\") -Recurse -Force
  after_script:
    - echo "Finished"
  tags:
    - windows

build-test-windows:
  stage: build-test
  needs:
    - job: build-windows
  before_script:
    - echo "Building Windows Test $CI_COMMIT_BRANCH"
  script:
    - Set-Variable -Name "buildpath" -Value (($pwd).path + "\build")
    - mkdir -P $buildpath
    - cd $buildpath
    - echo "Init project in:"+($pwd).path
    - C:\BuildTools_VS2022\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe -DCMAKE_BUILD_TYPE=RELEASE -DUSE_TESTS=ON -G Ninja $buildpath\..
    - echo "Starting build in:" + ($buildpath).path
    - C:\BuildTools_VS2022\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe --build $buildpath --config Release -- -j 4
    - Set-Variable -Name "DATE" -Value (Get-Date -Format "yyyy_MM_dd")
    - Set-Variable -Name "FNAME" -Value ("\" + $CI_COMMIT_BRANCH + "\" + $env:CI_COMMIT_REF_NAME + "_" + $env:CI_PIPELINE_ID)
    - Set-Variable -Name "outputpath" -Value ($buildpath + "\bin")
    - echo $FNAME
    - New-Item -Path ("C:\" + ($APP_NAME_CAPS) + "_CI") -Name $FNAME -ItemType "directory" -Force
    - Copy-Item (($outputpath) + "\*") -Destination ("C:\" + ($APP_NAME_CAPS) + "_CI\" + ($FNAME) + "\") -Recurse -Force
  after_script:
    - echo "Finished"
  tags:
    - windows

.build-unix:
  stage: build
  before_script:
    - echo "Building $OS_NAME $CI_COMMIT_BRANCH $CI_COMMIT_REF_NAME $CI_PIPELINE_ID"
    - echo "Current Changelog is the following:"
    - echo "`cat parsed_changelog.txt`"
    - git submodule sync --recursive
    - git submodule update --init --recursive
  script:
    - buildpath=$(pwd)"/build"
    - mkdir -p $buildpath
    - cd $buildpath
    - echo "Init project in:" $(pwd)
    - cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_BUILD_TYPE=RELEASE -DUSE_TESTS=OFF $buildpath/..
    - echo "Starting build in:" $buildpath
    - cmake --build $buildpath --config Release -- -j 4
    - export DATE=`date +%Y_%m_%d`
    - export FNAME=$CI_COMMIT_BRANCH'/'$CI_COMMIT_REF_NAME'_'$CI_PIPELINE_ID
    - export outputpath=$buildpath'/bin/'
    - echo $FNAME
    - mkdir -p ~/$APP_NAME_CAPS'_CI/'$FNAME
    - cp -r $outputpath/* ~/$APP_NAME_CAPS'_CI/'$FNAME'/' || true
    - ls ~/
    - ls ~/$APP_NAME_CAPS'_CI/'
    - ls ~/$APP_NAME_CAPS'_CI/'$FNAME'/'
  after_script:
    - echo "Finished"

.build-test-unix:
  stage: build-test
  before_script:
    - echo "Building Test $OS_NAME $CI_COMMIT_BRANCH $CI_COMMIT_REF_NAME $CI_PIPELINE_ID"
  script:
    - buildpath=$(pwd)"/build"
    - mkdir -p $buildpath
    - cd $buildpath
    - echo "Init project in:" $(pwd)
    - cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_BUILD_TYPE=RELEASE -DUSE_TESTS=ON $buildpath/..
    - echo "Starting build in:" $buildpath
    - cmake --build $buildpath --config Release -- -j 4
    - export DATE=`date +%Y_%m_%d`
    - export FNAME=$CI_COMMIT_BRANCH'/'$CI_COMMIT_REF_NAME'_'$CI_PIPELINE_ID
    - export outputpath=$buildpath'/bin/'
    - echo $FNAME
    - mkdir -p ~/$APP_NAME_CAPS'_CI/'$FNAME
    - cp -r $outputpath/* ~/$APP_NAME_CAPS'_CI/'$FNAME'/' || true
    - ls ~/
    - ls ~/$APP_NAME_CAPS'_CI/'
    - ls ~/$APP_NAME_CAPS'_CI/'$FNAME'/'
  after_script:
    - echo "Finished"

build-debian:
  extends: .build-unix
  variables:
    OS_NAME: "debian"
    OS_FULL_NAME: "linux_debian"
  tags:
    - debian

build-fedora:
  extends: .build-unix
  variables:
    OS_NAME: "fedora"
    OS_FULL_NAME: "linux_debian"
  tags:
    - fedora

build-macos:
  extends: .build-unix
  variables:
    OS_NAME: "mac"
    OS_FULL_NAME: "mac"
  needs: []
  tags:
    - macos
  rules:
    - if: '$CI_COMMIT_BRANCH'
      when: manual
      allow_failure: true
    - if: '$CI_COMMIT_TAG'
      when: manual
      allow_failure: true

build-macos-arm:
  extends: .build-unix
  variables:
    OS_NAME: "mac_arm"
    OS_FULL_NAME: "mac_arm"
  needs: []
  tags:
    - macos-arm
  rules:
    - if: '$CI_COMMIT_BRANCH'
      when: manual
      allow_failure: true
    - if: '$CI_COMMIT_TAG'
      when: manual
      allow_failure: true

build-test-debian:
  extends: .build-test-unix
  needs:
    - job: build-debian
  variables:
    OS_NAME: "debian"
    OS_FULL_NAME: "linux_debian"
  tags:
    - debian

build-test-fedora:
  extends: .build-test-unix
  needs:
    - job: build-fedora
  variables:
    OS_NAME: "fedora"
    OS_FULL_NAME: "linux_debian"
  tags:
    - fedora

build-test-macos:
  extends: .build-test-unix
  needs:
    - job: build-macos
  variables:
    OS_NAME: "mac"
    OS_FULL_NAME: "mac"
  tags:
    - macos
  when: manual

build-test-macos-arm:
  extends: .build-test-unix
  needs:
    - job: build-macos-arm
  variables:
    OS_NAME: "mac_arm"
    OS_FULL_NAME: "mac_arm"
  tags:
    - macos-arm
  when: manual

.test-unix:
  stage: test
  allow_failure: true
  before_script:
    - echo "Testing $OS_NAME $CI_COMMIT_BRANCH $CI_COMMIT_REF_NAME $CI_PIPELINE_ID"
  script:
    - export PROJPATH=$(pwd)
    - export DATE=`date +%Y_%m_%d`
    - export FNAME=$CI_COMMIT_BRANCH'/'$CI_COMMIT_REF_NAME'_'$CI_PIPELINE_ID
    - cd ~/$APP_NAME_CAPS'_CI/'$FNAME'/tests'
    - ./testsuite --gtest_filter=-*PerformanceOkay* --gtest_output="xml:report.xml"
    - mv report.xml $PROJPATH"/report.xml"
  after_script:
    - echo "Finished"
  artifacts:
    when: always
    reports:
      junit: ./report.xml
    expire_in: 4 weeks

test-debian:
  extends: .test-unix
  variables:
    OS_NAME: "debian"
  needs:
    - job: build-test-debian
  tags:
    - debian

test-fedora:
  extends: .test-unix
  variables:
    OS_NAME: "fedora"
  needs:
    - job: build-test-fedora
  tags:
    - fedora

test-macos:
  extends: .test-unix
  variables:
    OS_NAME: "mac"
  needs:
    - job: build-test-macos
  tags:
    - macos


test-macos-arm:
  extends: .test-unix
  variables:
    OS_NAME: "mac_arm"
  needs:
    - job: build-test-macos-arm
  tags:
    - macos-arm


test-windows:
  stage: test
  allow_failure: true
  before_script:
    - Write-Host "Testing Windows $CI_COMMIT_BRANCH"
  script:
    - Set-Variable -Name "PROJPATH" -Value (($pwd).path)
    - Set-Variable -Name "DATE" -Value (Get-Date -Format "yyyy_MM_dd")
    - Set-Variable -Name "FNAME" -Value ("\" + $CI_COMMIT_BRANCH + "\" + $env:CI_COMMIT_REF_NAME + "_" + $env:CI_PIPELINE_ID)
    - Set-Location ("C:\" + ($APP_NAME_CAPS) + "_CI\" + ($FNAME) + "\tests")
    - $AllArgs = @("--gtest_filter=-*PerformanceOkay* --gtest_output='xml:report.xml'")
    - powershell.exe -c "./testsuite.exe $AllArgs"
    - Move-Item -Path report.xml -Destination (($PROJPATH) + "\report.xml")
  after_script:
    - Write-Host "Finished"
  artifacts:
    when: always
    reports:
      junit: .\report.xml
    expire_in: 4 weeks
  needs:
    - job: build-test-windows
  tags:
    - windows

.benchmark-unix:
  stage: benchmark
  allow_failure: true
  before_script:
    - echo "Benchmarking $OS_NAME $CI_COMMIT_BRANCH $CI_COMMIT_REF_NAME $CI_PIPELINE_ID"
    - mkdir -p ~/$APP_NAME_CAPS'_CI/PerfoTestResults/'$CI_COMMIT_BRANCH'/'
  script:
    - export PROJPATH=$(pwd)
    - export DATE=`date +%Y_%m_%d`
    - export FNAME=$CI_COMMIT_BRANCH'/'$CI_COMMIT_REF_NAME'_'$CI_PIPELINE_ID
    - cd ~/$APP_NAME_CAPS'_CI/'$FNAME'/tests'
    - cp ~/$APP_NAME_CAPS'_CI/'PerfoTestResults/time_record_* . || cp ~/$APP_NAME_CAPS'_CI/PerfoTestResults/'$CI_COMMIT_BRANCH/time_record_* . || true
    - ./testsuite --gtest_filter=*PerformanceOkay* --gtest_output="xml:benchmark.xml"
    - ls .
    - mv ./time_record_* ~/$APP_NAME_CAPS'_CI/PerfoTestResults/'$CI_COMMIT_BRANCH'/' || true
    - mv benchmark.xml $PROJPATH"/benchmark.xml"
  after_script:
    - export DATE=`date +%Y_%m_%d`
    - export FNAME=$CI_COMMIT_BRANCH'/'$CI_COMMIT_REF_NAME'_'$CI_PIPELINE_ID
    - cd ~/$APP_NAME_CAPS'_CI/'$FNAME'/'
    - rm -rf ./tests
  artifacts:
    when: always
    reports:
      junit: ./benchmark.xml
    expire_in: 4 weeks

benchmark-debian:
  extends: .benchmark-unix
  variables:
    OS_NAME: "debian"
  tags:
    - debian

benchmark-fedora:
  extends: .benchmark-unix
  variables:
    OS_NAME: "fedora"
  tags:
    - fedora

benchmark-macos:
  extends: .benchmark-unix
  variables:
    OS_NAME: "mac"
  tags:
    - macos
  when: manual
  allow_failure: true

benchmark-macos-arm:
  extends: .benchmark-unix
  variables:
    OS_NAME: "mac_arm"
  tags:
    - macos-arm
  when: manual
  allow_failure: true

benchmark-windows:
  stage: benchmark
  allow_failure: true
  before_script:
    - Write-Host "Benchmarking Windows $CI_COMMIT_BRANCH"
    - mkdir -Force -P ("C:\" + ($APP_NAME_CAPS) + "_CI\PerfoTestResults\" + ($CI_COMMIT_BRANCH) + "\")
  script:
    - Set-Variable -Name "PROJPATH" -Value (($pwd).path)
    - Set-Variable -Name "DATE" -Value (Get-Date -Format "yyyy_MM_dd")
    - Set-Variable -Name "FNAME" -Value ("\" + $CI_COMMIT_BRANCH + "\" + $env:CI_COMMIT_REF_NAME + "_" + $env:CI_PIPELINE_ID)
    - Set-Location ("C:\" + ($APP_NAME_CAPS) + "_CI\" + ($FNAME) + "\tests")
    - Copy-Item -Force ("C:\" + ($APP_NAME_CAPS) + "_CI\PerfoTestResults\" + ($CI_COMMIT_BRANCH) + "time_record_*") (".\")
    - Copy-Item -Force ("C:\" + ($APP_NAME_CAPS) + "_CI\PerfoTestResults\time_record_*") (".\")
    - $AllArgs = @("--gtest_filter=*PerformanceOkay* --gtest_output=xml:benchmark.xml")
    - cmd.exe /c "start /b /wait /high testsuite.exe $AllArgs"
    - Move-Item -Path benchmark.xml -Destination (($PROJPATH) + "\benchmark.xml")
    - Move-Item -Force (".\time_record_*") ("C:\" + ($APP_NAME_CAPS) + "_CI\PerfoTestResults\" + ($CI_COMMIT_BRANCH) + "\")
  after_script:
    - Set-Variable -Name "DATE" -Value (Get-Date -Format "yyyy_MM_dd")
    - Set-Variable -Name "FNAME" -Value ("\" + $CI_COMMIT_BRANCH + "\" + $env:CI_COMMIT_REF_NAME + "_" + $env:CI_PIPELINE_ID)
    - Set-Location ("C:\" + ($APP_NAME_CAPS) + "_CI\" + ($FNAME) + "\")
    - Remove-Item -Recurse -Force ("./tests")
  artifacts:
    when: always
    reports:
      junit: .\benchmark.xml
    expire_in: 4 weeks
  tags:
    - windows

.artifact-windows:
  variables:
    TAG_SUFFIX: ""
  stage: build-artifact
  before_script:
    - mkdir -P ("./" + ($APP_NAME) + "_win" + ($TAG_SUFFIX))
    - Get-ChildItem ("./" + ($APP_NAME) + "_win" + ($TAG_SUFFIX)) | Remove-Item -Recurse -Force
  script:
    - Set-Variable -Name "DATE" -Value (Get-Date -Format "yyyy_MM_dd")
    - Set-Variable -Name "FNAME" -Value ("\" + $CI_COMMIT_BRANCH + "\" + $env:CI_COMMIT_REF_NAME + "_" + $env:CI_PIPELINE_ID)
    - Write-Host $FNAME
    - Write-Host $TAG_SUFFIX
    - Write-Host $CI_COMMIT_TAG
    - Write-Host $env:CI_COMMIT_TAG
    - Write-Host $env:CI_COMMIT_REF_NAME
    - Copy-Item ("C:/" + ($APP_NAME_CAPS) + "_CI/" + ($FNAME) + "/*") -Destination ("./" + ($APP_NAME) + "_win" + ($TAG_SUFFIX)) -Recurse -Force
    - Set-Location ("./" + ($APP_NAME) + "_win" + ($TAG_SUFFIX))
  rules:
    - if: '($CI_COMMIT_TAG)'
      variables:
        TAG_SUFFIX: "_${CI_COMMIT_TAG}"
  artifacts:
    name: ${APP_NAME}_win${TAG_SUFFIX}
    paths:
      - ./${APP_NAME}_win${TAG_SUFFIX}


.artifact-unix:
  variables:
    TAG_SUFFIX: ""
  stage: build-artifact
  before_script:
    - rm -rf ./$APP_NAME'_'$OS_NAME$TAG_SUFFIX
    - mkdir -p ./$APP_NAME'_'$OS_NAME$TAG_SUFFIX
  script:
    - export DATE=`date +%Y_%m_%d`
    - export FNAME=$CI_COMMIT_BRANCH'/'$CI_COMMIT_REF_NAME'_'$CI_PIPELINE_ID
    - echo $FNAME
    - echo $TAG_SUFFIX
    - echo $CI_COMMIT_TAG
    - echo $CI_COMMIT_REF_NAME
    - echo ~/$APP_NAME_CAPS'_CI/'$FNAME'/'
    - ls ~/$APP_NAME_CAPS'_CI/'
    - ls ~/$APP_NAME_CAPS'_CI/'$FNAME'/'
    - cp -r ~/$APP_NAME_CAPS'_CI/'$FNAME'/'* ./$APP_NAME'_'$OS_NAME$TAG_SUFFIX || true
    - cd ./$APP_NAME'_'$OS_NAME$TAG_SUFFIX/
  rules:
    - if: '($CI_COMMIT_TAG)'
      variables:
        TAG_SUFFIX: "_${CI_COMMIT_TAG}"
  artifacts:
    name: ${APP_NAME}_${OS_NAME}${TAG_SUFFIX}
    paths:
      - ./${APP_NAME}_${OS_NAME}${TAG_SUFFIX}

.artifact-prop:
  artifacts:
    expire_in: 8 weeks
  rules:
    - if: '($CI_COMMIT_BRANCH && ($OS_NAME != "mac" && $OS_NAME != "mac_arm"))'
      when: always
    - if: '($CI_COMMIT_BRANCH && ($OS_NAME == "mac" || $OS_NAME == "mac_arm"))'
      allow_failure: true

.artifact-prop-tags:
  artifacts:
    expire_in: 5 yrs
  rules:
    - if: '($CI_COMMIT_TAG && ($OS_NAME != "mac" && $OS_NAME != "mac_arm"))'
      when: always
    - if: '($CI_COMMIT_TAG && ($OS_NAME == "mac" || $OS_NAME == "mac_arm"))'
      allow_failure: true

build-artifact-debian:
  extends:
    - .artifact-unix
    - .artifact-prop
  variables:
    OS_NAME: "debian"
  needs:
    - job: build-debian
  tags:
    - debian

build-artifact-fedora:
  extends:
    - .artifact-unix
    - .artifact-prop
  variables:
    OS_NAME: "fedora"
  needs:
    - job: build-fedora
  tags:
    - fedora

build-artifact-macos:
  extends:
    - .artifact-unix
    - .artifact-prop
  stage: build-artifact
  needs:
    - job: build-macos
  variables:
    OS_NAME: "mac"
  tags:
    - macos
  allow_failure: true

build-artifact-macos-arm:
  extends:
    - .artifact-unix
    - .artifact-prop
  stage: build-artifact
  needs:
    - job: build-macos-arm
  variables:
    OS_NAME: "mac_arm"
  tags:
    - macos-arm
  allow_failure: true

build-artifact-windows:
  extends:
    - .artifact-windows
    - .artifact-prop
  needs:
    - job: build-windows
  tags:
    - windows

build-artifact-debian-tags:
  extends:
    - .artifact-unix
    - .artifact-prop-tags
  needs:
    - job: build-debian
    - job: prepare_job
      artifacts: true
  variables:
    OS_NAME: "debian"
  tags:
    - debian

build-artifact-fedora-tags:
  extends:
    - .artifact-unix
    - .artifact-prop-tags
  needs:
    - job: build-fedora
    - job: prepare_job
      artifacts: true
  variables:
    OS_NAME: "fedora"
  tags:
    - fedora

build-artifact-macos-tags:
  variables:
    OS_NAME: "mac"
  extends:
    - .artifact-unix
    - .artifact-prop-tags
  needs:
    - job: build-macos
    - job: prepare_job
      artifacts: true
  stage: build-artifact
  tags:
    - macos
  allow_failure: true

build-artifact-macos-arm-tags:
  variables:
    OS_NAME: "mac_arm"
  extends:
    - .artifact-unix
    - .artifact-prop-tags
  needs:
    - job: build-macos-arm
    - job: prepare_job
      artifacts: true
  stage: build-artifact
  tags:
    - macos-arm
  allow_failure: true

build-artifact-windows-tags:
  extends:
    - .artifact-windows
    - .artifact-prop-tags
  needs:
    - job: build-windows
    - job: prepare_job
      artifacts: true
  tags:
    - windows
